@page "/day1"

<PageTitle>Day 1</PageTitle>

<h3>Day1</h3>
<a href="https://adventofcode.com/2023/day/1">Puzzle Link</a>
<h4>Part 1</h4>
<h5>Input</h5>
<p>@part1PuzzleInput</p>
<p>Total @totalPart1</p>

<h4>Part 2</h4>
<h5>Input</h5>
<p>@part2PuzzleInput</p>
<p>Total @totalPart2</p>

@code {
    FileReader reader = new FileReader();

    bool useSample = false;
    string part1PuzzleInput = "";
    string part2PuzzleInput = "";
    string[] part1SplitInput = Array.Empty<string>();
    string[] part2SplitInput = Array.Empty<string>();
    int totalPart1 = 0;
    int totalPart2 = 0;

    Dictionary<string, int> numberWords = new() {
        { "one", 1}, 
        { "two", 2 }, 
        { "three", 3 }, 
        { "four", 4 }, 
        { "five", 5 },
        {"six", 6 }, 
        {"seven", 7 }, 
        {"eight", 8 }, 
        {"nine", 9 }
    };

    private void GetPuzzleInput()
    {
        var filename = "Day1.txt";
        //var filename = "Day1Part1Sample.txt";
        //var filename2 = "Day1Part2Sample.txt";
        part1PuzzleInput = reader.ReadFile(filename);
        part1SplitInput = part1PuzzleInput.Split('\n');

        part2PuzzleInput = reader.ReadFile(filename);
        part2SplitInput = part2PuzzleInput.Split('\n');
    }

    private void ToggleSample()
    {
        useSample = !useSample;
        GetPuzzleInput();
        Part1();
        Part2();
    }

    private List<int> GetAllDigitsFromString(string input)
    {
        return input.Where(Char.IsDigit).Select(c => int.Parse(c.ToString())).ToList();
    }

    private List<int> JoinFirstsAndLasts(IEnumerable<int> firsts, IEnumerable<int> lasts)
    {
        return firsts.Select<int, string>((c, index) =>
        {
            return $"{c}{lasts.ElementAt(index)}";
        }).Select(n => Convert.ToInt32(n)).ToList();
    }

    private int TotalList(IEnumerable<int> numbers)
    {
        return numbers.Sum();
    }

    private string ListToString<T>(List<T> list, bool? spacing = false)
    {
        string spacingCharacter = spacing is true ? " " : "";
        return list.Aggregate("", (acc, x) => $"{acc}{spacingCharacter}{x}");
    }

    private void Part1()
    {
        List<List<int>> splitNumbers = part1SplitInput.Select(GetAllDigitsFromString).ToList();
        List<int> firsts = splitNumbers.Select(m => m.First()).ToList();
        List<int> lasts = splitNumbers.Select(m => m.Last()).ToList();
        List<int> numbers = JoinFirstsAndLasts(firsts, lasts);
        totalPart1 = numbers.Sum();
    }

    private void Part2()
    {
        var splitNumbers = part2SplitInput.Select(row =>
        {
            string buffer = "";
            return row.Select(character =>
            {
                if (Char.IsDigit(character))
                {
                    buffer = "";
                    return int.Parse(character.ToString());
                }
                buffer += character;
                var numberMatch = numberWords.FirstOrDefault(n => buffer.Contains(n.Key));
                if (!numberMatch.Equals(default(KeyValuePair<string, int>)))
                {
                    buffer = buffer.Last().ToString();
                    return numberMatch.Value;
                }
                return 0;

            }).Where(number => number is not 0).ToList();
        }).ToList();
        List<int> firsts = splitNumbers.Select(f => f.First()).ToList();
        List<int> lasts = splitNumbers.Select(f => f.Last()).ToList();
        totalPart2 = JoinFirstsAndLasts(firsts, lasts).Sum();
    }

    protected override void OnInitialized()
    {
        GetPuzzleInput();
        Part1();
        Part2();
    }
}
